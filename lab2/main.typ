#import "../conf.typ" : conf
#show: conf.with(
  title: [],
  type: "pract",
  info: (
      author: (
        name: [Толстова Роберта Сергеевича],
        faculty: [КНиИТ],
        group: "251",
        sex: "male"
      ),
      inspector: (
        degree: "Cтарший преподаватель",
        name: "Е. М. Черноусова"
      )
  ),
  settings: (
    title_page: (
      enabled: true
    ),
    contents_page: (
      enabled: true
    )
  )
)

= Исходный код программ
== Задание 1
Первая цифра задана в AX, вторая цифра задана в BX. Написать программу, которая выводит в одну строку первую цифру, пробел, вторую цифру.

#align(center)[#image("task1.png")]
#text(size: 12pt, align(center)[Фото запуска первой программы])

```nasm
.model small
.stack 100h

.data 
Names db 'Tolstov Robert 251', 0Dh, 0Ah, '$'
enter db 0Dh, 0Ah, '$'

.code

start:
mov AX, @data
mov DS, AX

;адрес начала строки
mov DX, offset Names
call cout

mov AL, 6 ; занесение первой цифры в регистр AL
mov BL, 9 ; занесение второй цифры в регистр BL

push AX ; добавление AX в стек

mov DL, AL  ; переносим AL в DL, чтобы вывести символ в AL
add DL, 30h ; перевод цифры в символьную форму с помощью кода ASCII и команды ADD
call coutElem

mov DL, ' ' ; переносим AL в DL, чтобы вывести символ в AL
call coutElem

mov DL, BL  ; переносим BL в DL, чтобы вывести символ в BL
add DL, 30h ;перевод цифры в символьную форму с помощью кода ASCII и команды ADD
call coutElem

pop AX ; удаление AX из стека

mov AX,4C00h ; функция завершения программы 4Ch с кодом возврата 0
int 21h      ; вызов функции DOS

; вывод строки
cout proc
    mov AH, 09h ;Функция DOS 09h вывода на экран
    int 21h ;вызов функции DOS 09h
    ret ; возврат в точку вызова
cout endp

; вывод символа
coutElem proc
    mov AH, 02h ; номер функции вывода одного символа
    int 21h ;вызов функции 02h
    ret ; возврат в точку вызова
coutElem endp

end start
```
#text(size: 12pt, align(center)[Код первой программы])

#pagebreak()

#set text( 
  size: 8pt
)

#set table.hline(stroke: .6pt)

#table(
  // set text(1pt),
  columns: 13,
  stroke: none,
  inset: 2.5pt,
  align: center,
  table.hline(),
  table.header(
    [*Шаг*], 
    [*Машинный 
    \код*], 
    [*Команда*], 
    table.cell(colspan: 9, 
      
      [*Регистры*]
    ),
    [*Флаги*],
    table.hline(start: 3),
    [ ], [ ], [ ], [AX], [BX], [CX], [DX], [SP], [DS], [SS], [CS], [IP], [CZSOPAID],
  ),
  
 
  table.hline(),
  table.vline(x: 0),
  table.vline(x: 1),
  table.vline(x: 2),
  table.vline(x: 3),
  table.vline(x: 4, start: 1),
  table.vline(x: 5, start: 1),
  table.vline(x: 6, start: 1),
  table.vline(x: 7, start: 1),
  table.vline(x: 8, start: 1),
  table.vline(x: 9, start: 1),
  table.vline(x: 10, start: 1),
  table.vline(x: 11, start: 1),
  table.vline(x: 12 ),
  table.vline(x: 13),
  [1], [B409], [mov ah, 09], 
  // регистры AX, BX, CX, DX
  [0000], [0000], [0000], [0000],
  // регистр SP
  [FFFE],
  // регистры DS, SS, CS
  [489D], [489D], [489D],
  // регистр IP
  [0100],
  // флаги
  [00000010],
  table.hline(),
  [2], [BA3301], [mov dx, 0133], 
  // регистры AX, BX, CX, DX
  [0900], [0000], [0000], [0000],
  // регистр SP
  [FFFE],
  // регистры DS, SS, CS
  [489D], [489D], [489D],
  // регистр IP
  [0102],
  // флаги
  [00000010],
  table.hline(),
  [3], [CD21], [int 21], 
  // регистры AX, BX, CX, DX
  [0900], [0000], [0000], [0133],
  // регистр SP
  [FFFE],
  // регистры DS, SS, CS
  [489D], [489D], [489D],
  // регистр IP
  [0105],
  // флаги
  [00000010],
  table.hline(),
  [4], [E82100], [call 012B], 
  // регистры AX, BX, CX, DX
  [0900], [0000], [0000], [0133],
  // регистр SP
  [FFFE],
  // регистры DS, SS, CS
  [489D], [489D], [489D],
  // регистр IP
  [0107],
  // флаги
  [00000010],
  table.hline(),
  [5], [BA4501], [mov dx, 0145], 
  // регистры AX, BX, CX, DX
  [0900], [0000], [0000], [0133],
  // регистр SP
  [FFFC],
  // регистры DS, SS, CS
  [489D], [489D], [489D],
  // регистр IP
  [012B],
  // флаги
  [00000010],
  table.hline(),
  [6], [B409], [mov ah, 09], 
  // регистры AX, BX, CX, DX
  [0900], [0000], [0000], [0145],
  // регистр SP
  [FFFC],
  // регистры DS, SS, CS
  [489D], [489D], [489D],
  // регистр IP
  [012E],
  // флаги
  [00000010],
  table.hline(),
  [7], [CD21], [int 21], 
  // регистры AX, BX, CX, DX
  [0900], [0000], [0000], [0145],
  // регистр SP
  [FFFC],
  // регистры DS, SS, CS
  [489D], [489D], [489D],
  // регистр IP
  [0130],
  // флаги
  [00000010],
  table.hline(),
  [8], [C3], [ret], 
  // регистры AX, BX, CX, DX
  [0900], [0000], [0000], [0145],
  // регистр SP
  [FFFC],
  // регистры DS, SS, CS
  [489D], [489D], [489D],
  // регистр IP
  [0132],
  // флаги
  [00000010],
  table.hline(),
  [9], [B80700], [mov ax, 0007], 
  // регистры AX, BX, CX, DX
  [0900], [0000], [0000], [0145],
  // регистр SP
  [FFFE],
  // регистры DS, SS, CS
  [489D], [489D], [489D],
  // регистр IP
  [010A],
  // флаги
  [00000010],
  table.hline(),
  [10], [053000], [add ax, 0030], 
  // регистры AX, BX, CX, DX
  [0007], [0000], [0000], [0145],
  // регистр SP
  [FFFE],
  // регистры DS, SS, CS
  [489D], [489D], [489D],
  // регистр IP
  [010D],
  // флаги
  [00000010],
  table.hline(),
  [11], [BB0500], [mov bx,0005], 
  // регистры AX, BX, CX, DX
  [0037], [0000], [0000], [0145],
  // регистр SP
  [FFFE],
  // регистры DS, SS, CS
  [489D], [489D], [489D],
  // регистр IP
  [0110],
  // флаги
  [00000010],
  table.hline(),
  [12], [83C330], [add bx, 0030], 
  // регистры AX, BX, CX, DX
  [0037], [0005], [0000], [0145],
  // регистр SP
  [FFFE],
  // регистры DS, SS, CS
  [489D], [489D], [489D],
  // регистр IP
  [0113],
  // флаги
  [00000010],
  table.hline(),
  [13], [8BD0], [mov dx, ax], 
  // регистры AX, BX, CX, DX
  [0037], [0035], [0000], [0145],
  // регистр SP
  [FFFE],
  // регистры DS, SS, CS
  [489D], [489D], [489D],
  // регистр IP
  [0116],
  // флаги
  [00001010],
  table.hline(),
  [14], [B402], [mov ah, 02], 
  // регистры AX, BX, CX, DX
  [0037], [0035], [0000], [0037],
  // регистр SP
  [FFFE],
  // регистры DS, SS, CS
  [489D], [489D], [489D],
  // регистр IP
  [0118],
  // флаги
  [00001010],
  table.hline(),
  [15], [CD21], [int 21], 
  // регистры AX, BX, CX, DX
  [0237], [0035], [0000], [0037],
  // регистр SP
  [FFFE],
  // регистры DS, SS, CS
  [489D], [489D], [489D],
  // регистр IP
  [011A],
  // флаги
  [00001010],
  table.hline(),
  [16], [B200], [mov dl, 00], 
  // регистры AX, BX, CX, DX
  [0237], [0035], [0000], [0037],
  // регистр SP
  [FFFE],
  // регистры DS, SS, CS
  [489D], [489D], [489D],
  // регистр IP
  [011C],
  // флаги
  [00001010],
  table.hline(),
  [17], [CD21], [int 21], 
  // регистры AX, BX, CX, DX
  [0237], [0035], [0000], [0000],
  // регистр SP
  [FFFE],
  // регистры DS, SS, CS
  [489D], [489D], [489D],
  // регистр IP
  [011E],
  // флаги
  [00001010],
  table.hline(),
  [18], [8BD3], [mov dx, bx], 
  // регистры AX, BX, CX, DX
  [0200], [0035], [0000], [0000],
  // регистр SP
  [FFFE],
  // регистры DS, SS, CS
  [489D], [489D], [489D],
  // регистр IP
  [0120],
  // флаги
  [00001010],
  table.hline(),
  [19], [B402], [mov ah, 02], 
  // регистры AX, BX, CX, DX
  [0200], [0035], [0000], [0035],
  // регистр SP
  [FFFE],
  // регистры DS, SS, CS
  [489D], [489D], [489D],
  // регистр IP
  [0122],
  // флаги
  [00001010],
  table.hline(),
  [20], [CD21], [int 21], 
  // регистры AX, BX, CX, DX
  [0200], [0035], [0000], [0035],
  // регистр SP
  [FFFE],
  // регистры DS, SS, CS
  [489D], [489D], [489D],
  // регистр IP
  [0124],
  // флаги
  [00001010],
  table.hline(),
  [21], [B8004C], [mov ax, 4C00], 
  // регистры AX, BX, CX, DX
  [0235], [0035], [0000], [0035],
  // регистр SP
  [FFFE],
  // регистры DS, SS, CS
  [489D], [489D], [489D],
  // регистр IP
  [0126],
  // флаги
  [00001010],
  table.hline(),
  [22], [CD21], [int 21], 
  // регистры AX, BX, CX, DX
  [4C00], [0035], [0000], [0035],
  // регистр SP
  [FFFE],
  // регистры DS, SS, CS
  [489D], [489D], [489D],
  // регистр IP
  [0129],
  // флаги
  [00001010],
  table.hline(),
  [23], [CD21], [int 21], 
  // регистры AX, BX, CX, DX
  [0192], [2110], [F670], [0BB2],
  // регистр SP
  [0106],
  // регистры DS, SS, CS
  [2110], [0192], [0000],
  // регистр IP
  [0000],
  // флаги
  [10100011],
  table.hline(),
  

)

#set text( 
  size: 14pt
)

#text(size: 12pt, align(center)[Таблица трассировки первой программы])

== Задание 2
#v(0.3cm)

#set par(justify : true, first-line-indent: 2em)

Первая цифра задана в AX, вторая цифра задана в BX. Написать программу, которая выводит в одну строку первую цифру (AX), пробел, вторую цифру (BX). Далее совершает обмен значений регистров AX и BX и снова в новой строке на экране выводит в одну строку первую цифру (AX), пробел, вторую цифру (BX). Обмен совершить без использования дополнительной памяти (командой XCHG).

#align(center)[#image("task2.png")]
#text(size: 12pt, align(center)[Фото запуска второй программы])

```nasm
.model small
.stack 100h

.data 
Names db 'Tolstov Robert 251', 0Dh, 0Ah, '$'
enter db 0Dh, 0Ah, '$'

.code

start:
mov AX, @data
mov DS, AX

;адрес начала строки
mov DX, offset Names
call cout

mov AL, 6 ; занесение первой цифры в регистр AL
mov BL, 9 ; занесение второй цифры в регистр BL

push AX ; добавление AX в стек

mov DL, AL  ; переносим AL в DL, чтобы вывести символ в AL
add DL, 30h ; перевод цифры в символьную форму с помощью кода ASCII и команды ADD
call coutElem

mov DL, ' ' ; переносим AL в DL, чтобы вывести символ в AL
call coutElem

mov DL, BL  ; переносим BL в DL, чтобы вывести символ в BL
add DL, 30h ;перевод цифры в символьную форму с помощью кода ASCII и команды ADD
call coutElem

pop AX ; удаление AX из стека

XCHG AL, BL ; меняем местами AL и BL

mov DX, offset enter ;адрес начала строки
call cout

mov DL, AL  ; переносим AL в DL, чтобы вывести символ в AL
add DL, 30h ; перевод цифры в символьную форму с помощью кода ASCII и команды ADD
call coutElem

mov DL, ' ' ; переносим AL в DL, чтобы вывести символ в AL
call coutElem

mov DL, BL  ; переносим BL в DL, чтобы вывести символ в BL
add DL, 30h ; перевод цифры в символьную форму с помощью кода ASCII и команды ADD
call coutElem

mov AX,4C00h ; функция завершения программы 4Ch с кодом возврата 0
int 21h      ; вызов функции DOS

; вывод строки
cout proc
    mov AH, 09h ;Функция DOS 09h вывода на экран
    int 21h ;вызов функции DOS 09h
    ret ; возврат в точку вызова
cout endp

; вывод символа
coutElem proc
    mov AH, 02h ; номер функции вывода одного символа
    int 21h ;вызов функции 02h
    ret ; возврат в точку вызова
coutElem endp

end start
```
#text(size: 12pt, align(center)[Код второй программы])

#set text( 
  size: 8pt
)

#set table.hline(stroke: .6pt)

#table(
  // set text(1pt),
  columns: 13,
  stroke: none,
  inset: 2.5pt,
  align: center,
  table.hline(),
  table.header(
    [*Шаг*], 
    [*Машинный 
    \код*], 
    [*Команда*], 
    table.cell(colspan: 9, 
      
      [*Регистры*]
    ),
    [*Флаги*],
    table.hline(start: 3),
    [ ], [ ], [ ], [AX], [BX], [CX], [DX], [SP], [DS], [SS], [CS], [IP], [CZSOPAID],
  ),
  
   table.hline(),
  table.vline(x: 0),
  table.vline(x: 1),
  table.vline(x: 2),
  table.vline(x: 3),
  table.vline(x: 4, start: 1),
  table.vline(x: 5, start: 1),
  table.vline(x: 6, start: 1),
  table.vline(x: 7, start: 1),
  table.vline(x: 8, start: 1),
  table.vline(x: 9, start: 1),
  table.vline(x: 10, start: 1),
  table.vline(x: 11, start: 1),
  table.vline(x: 12 ),
  table.vline(x: 13),
  [1], [B8B348], [mov ax, 48B3], 
  // регистры AX, BX, CX, DX
  [0000], [0000], [0000], [0000],
  // регистр SP
  [0100],
  // регистры DS, SS, CS
  [489D], [48B5], [48AD],
  // регистр IP
  [0000],
  // флаги
  [00000010],
  table.hline(),
  [2], [8ED8], [mov dx, ax], 
  // регистры AX, BX, CX, DX
  [48B3], [0000], [0000], [0000],
  // регистр SP
  [0100],
  // регистры DS, SS, CS
  [489D], [48B5], [48AD],
  // регистр IP
  [0003],
  // флаги
  [00000010],
  table.hline(),
  [3], [BA0000], [mov dx, 0000], 
  // регистры AX, BX, CX, DX
  [48B3], [0000], [0000], [0000],
  // регистр SP
  [0100],
  // регистры DS, SS, CS
  [48B3], [48B5], [48AD],
  // регистр IP
  [0005],
  // флаги
  [00000010],
  table.hline(),
  [4], [E83D00], [call 0048], 
  // регистры AX, BX, CX, DX
  [48B3], [0000], [0000], [0000],
  // регистр SP
  [0100],
  // регистры DS, SS, CS
  [48B3], [48B5], [48AD],
  // регистр IP
  [0008],
  // флаги
  [00000010],
  table.hline(),
  [5], [B409], [mov ah, 09], 
  // регистры AX, BX, CX, DX
  [48B3], [0000], [0000], [0000],
  // регистр SP
  [00FE],
  // регистры DS, SS, CS
  [48B3], [48B5], [48AD],
  // регистр IP
  [0048],
  // флаги
  [00000010],
  table.hline(),
  [6], [CD21], [int 21], 
  // регистры AX, BX, CX, DX
  [09B3], [0000], [0000], [0000],
  // регистр SP
  [00FE],
  // регистры DS, SS, CS
  [48B3], [48B5], [48AD],
  // регистр IP
  [004A],
  // флаги
  [00000010],
  table.hline(),
  [7], [C3], [ret], 
  // регистры AX, BX, CX, DX
  [09B3], [0000], [0000], [0000],
  // регистр SP
  [00FE],
  // регистры DS, SS, CS
  [48B3], [48B5], [48AD],
  // регистр IP
  [004C],
  // флаги
  [00000010],
  table.hline(),
  [8], [B007], [mov al, 07], 
  // регистры AX, BX, CX, DX
  [09B3], [0000], [0000], [0000],
  // регистр SP
  [0100],
  // регистры DS, SS, CS
  [48B3], [48B5], [48AD],
  // регистр IP
  [000B],
  // флаги
  [00000010],
  table.hline(),
  [9], [B305], [mov bl, 05], 
  // регистры AX, BX, CX, DX
  [0907], [0000], [0000], [0000],
  // регистр SP
  [0100],
  // регистры DS, SS, CS
  [48B3], [48B5], [48AD],
  // регистр IP
  [000D],
  // флаги
  [00000010],
  table.hline(),
  [10], [50], [push ax], 
  // регистры AX, BX, CX, DX
  [0907], [0005], [0000], [0000],
  // регистр SP
  [0100],
  // регистры DS, SS, CS
  [48B3], [48B5], [48AD],
  // регистр IP
  [000F],
  // флаги
  [00000010],
  table.hline(),
  [11], [8AD0], [mov dl, al], 
  // регистры AX, BX, CX, DX
  [0907], [0005], [0000], [0000],
  // регистр SP
  [00FE],
  // регистры DS, SS, CS
  [48B3], [48B5], [48AD],
  // регистр IP
  [0010],
  // флаги
  [00000010],
  table.hline(),
  [12], [80C230], [add dl, 30], 
  // регистры AX, BX, CX, DX
  [0907], [0005], [0000], [0007],
  // регистр SP
  [00FE],
  // регистры DS, SS, CS
  [48B3], [48B5], [48AD],
  // регистр IP
  [0012],
  // флаги
  [00000010],
  table.hline(),
  [13], [E83500], [call 004D], 
  // регистры AX, BX, CX, DX
  [0907], [0005], [0000], [0037],
  // регистр SP
  [00FE],
  // регистры DS, SS, CS
  [48B3], [48B5], [48AD],
  // регистр IP
  [0015],
  // флаги
  [00000010],
  table.hline(),
  [14], [B402], [mov ah, 02], 
  // регистры AX, BX, CX, DX
  [0907], [0005], [0000], [0037],
  // регистр SP
  [00FC],
  // регистры DS, SS, CS
  [48B3], [48B5], [48AD],
  // регистр IP
  [004D],
  // флаги
  [00000010],
  table.hline(),
  [15], [CD21], [int 21], 
  // регистры AX, BX, CX, DX
  [0207], [0005], [0000], [0037],
  // регистр SP
  [00FC],
  // регистры DS, SS, CS
  [48B3], [48B5], [48AD],
  // регистр IP
  [004F],
  // флаги
  [00000010],
  table.hline(),
  [16], [C3], [ret], 
  // регистры AX, BX, CX, DX
  [0237], [0005], [0000], [0037],
  // регистр SP
  [00FC],
  // регистры DS, SS, CS
  [48B3], [48B5], [48AD],
  // регистр IP
  [0051],
  // флаги
  [00000010],
  table.hline(),
  [17], [B220], [mov dl, 20], 
  // регистры AX, BX, CX, DX
  [0237], [0005], [0000], [0037],
  // регистр SP
  [00FE],
  // регистры DS, SS, CS
  [48B3], [48B5], [48AD],
  // регистр IP
  [0018],
  // флаги
  [00000010],
  table.hline(),
  [18], [E83000], [call 004D], 
  // регистры AX, BX, CX, DX
  [0237], [0005], [0000], [0020],
  // регистр SP
  [00FE],
  // регистры DS, SS, CS
  [48B3], [48B5], [48AD],
  // регистр IP
  [001A],
  // флаги
  [00000010],
  table.hline(),
  [19], [8AD3], [mov dl, bl], 
  // регистры AX, BX, CX, DX
  [0220], [0005], [0000], [0020],
  // регистр SP
  [00FE],
  // регистры DS, SS, CS
  [48B3], [48B5], [48AD],
  // регистр IP
  [001D],
  // флаги
  [00000010],
  table.hline(),
  [20], [80C230], [add dl, 30], 
  // регистры AX, BX, CX, DX
  [0220], [0005], [0000], [0005],
  // регистр SP
  [00FE],
  // регистры DS, SS, CS
  [48B3], [48B5], [48AD],
  // регистр IP
  [001F],
  // флаги
  [00000010],
  table.hline(),
  [21], [E82800], [call 004D], 
  // регистры AX, BX, CX, DX
  [0220], [0005], [0000], [0035],
  // регистр SP
  [00FE],
  // регистры DS, SS, CS
  [48B3], [48B5], [48AD],
  // регистр IP
  [0022],
  // флаги
  [00001010],
  table.hline(),
  [22], [58], [pop ax], 
  // регистры AX, BX, CX, DX
  [0235], [0005], [0000], [0035],
  // регистр SP
  [00FE],
  // регистры DS, SS, CS
  [48B3], [48B5], [48AD],
  // регистр IP
  [0025],
  // флаги
  [00001010],
  table.hline(),
  [23], [86C3], [xchg bl, al], 
  // регистры AX, BX, CX, DX
  [0907], [0005], [0000], [0035],
  // регистр SP
  [0100],
  // регистры DS, SS, CS
  [48B3], [48B5], [48AD],
  // регистр IP
  [0026],
  // флаги
  [00001010],
  table.hline(),
  [24], [BA1400], [mov dx, 0014], 
  // регистры AX, BX, CX, DX
  [0905], [0007], [0000], [0035],
  // регистр SP
  [0100],
  // регистры DS, SS, CS
  [48B3], [48B5], [48AD],
  // регистр IP
  [0028],
  // флаги
  [00001010],
  table.hline(),
  [25], [E81A00], [call 0048], 
  // регистры AX, BX, CX, DX
  [0905], [0007], [0000], [0014],
  // регистр SP
  [0100],
  // регистры DS, SS, CS
  [48B3], [48B5], [48AD],
  // регистр IP
  [002B],
  // флаги
  [00001010],
  table.hline(),
  [26], [8AD0], [mov dl, al], 
  // регистры AX, BX, CX, DX
  [0905], [0007], [0000], [0014],
  // регистр SP
  [0100],
  // регистры DS, SS, CS
  [48B3], [48B5], [48AD],
  // регистр IP
  [002E],
  // флаги
  [00001010],
  table.hline(),
  [27], [80C230], [add dl, 30], 
  // регистры AX, BX, CX, DX
  [0905], [0007], [0000], [0005],
  // регистр SP
  [0100],
  // регистры DS, SS, CS
  [48B3], [48B5], [48AD],
  // регистр IP
  [0030],
  // флаги
  [00001010],
  table.hline(),
  [28], [E81700], [call 004D], 
  // регистры AX, BX, CX, DX
  [0905], [0007], [0000], [0035],
  // регистр SP
  [0100],
  // регистры DS, SS, CS
  [48B3], [48B5], [48AD],
  // регистр IP
  [0033],
  // флаги
  [00001010],
  table.hline(),
  [29], [B220], [mov dl, 20], 
  // регистры AX, BX, CX, DX
  [0235], [0007], [0000], [0035],
  // регистр SP
  [0100],
  // регистры DS, SS, CS
  [48B3], [48B5], [48AD],
  // регистр IP
  [0036],
  // флаги
  [00001010],
  table.hline(),
  [30], [E81200], [call 004D], 
  // регистры AX, BX, CX, DX
  [0235], [0007], [0000], [0020],
  // регистр SP
  [0100],
  // регистры DS, SS, CS
  [48B3], [48B5], [48AD],
  // регистр IP
  [0038],
  // флаги
  [00001010],
  table.hline(),
  [31], [8AD3], [mov dl, bl], 
  // регистры AX, BX, CX, DX
  [0220], [0007], [0000], [0020],
  // регистр SP
  [0100],
  // регистры DS, SS, CS
  [48B3], [48B5], [48AD],
  // регистр IP
  [003B],
  // флаги
  [00001010],
  table.hline(),
  [32], [80C230], [add dl, 30], 
  // регистры AX, BX, CX, DX
  [0220], [0007], [0000], [0007],
  // регистр SP
  [0100],
  // регистры DS, SS, CS
  [48B3], [48B5], [48AD],
  // регистр IP
  [003D],
  // флаги
  [00001010],
  table.hline(),
  [33], [E80A00], [call 004D], 
  // регистры AX, BX, CX, DX
  [0220], [0007], [0000], [0037],
  // регистр SP
  [0100],
  // регистры DS, SS, CS
  [48B3], [48B5], [48AD],
  // регистр IP
  [0040],
  // флаги
  [00000010],
  table.hline(),
  [34], [B8004C], [mov ax, 4C00], 
  // регистры AX, BX, CX, DX
  [0237], [0007], [0000], [0037],
  // регистр SP
  [0100],
  // регистры DS, SS, CS
  [48B3], [48B5], [48AD],
  // регистр IP
  [0043],
  // флаги
  [00000010],
  table.hline(),
  [35], [CD21], [int 21], 
  // регистры AX, BX, CX, DX
  [4C00], [0007], [0000], [0037],
  // регистр SP
  [0100],
  // регистры DS, SS, CS
  [48B3], [48B5], [48AD],
  // регистр IP
  [0046],
  // флаги
  [00000010],
  table.hline(),
  [36], [CD21], [int 21], 
  // регистры AX, BX, CX, DX
  [0192], [2110], [F670], [0BB2],
  // регистр SP
  [0106],
  // регистры DS, SS, CS
  [2110], [0192], [0000],
  // регистр IP
  [0000],
  // флаги
  [10100011],
  table.hline(),
  
)

#set text( 
  size: 14pt
)

#text(size: 12pt, align(center)[Таблица трассировки второй программы])

= Ответы на контрольные вопросы
== В какой регистр надо поместить код выводимого символа? Какой код DOS-функции используется для вывода отдельного символа на экран?
Код выводимого символа помещается в регистр `DL`. Это стандартный регистр, который используется для передачи данных в функцию вывода символов.
Код DOS-функции для вывода отдельного символа на экран -- это #raw(lang: "asm", "02h"). При вызове этой функции через прерывание #raw(lang: "asm", "int 21h") содержимое регистра `DL` интерпретируется как символ, который будет выведен на экран.

== Какая операция позволяет получить для цифры её код в кодовой таблице?
Для получения кода цифры в кодовой таблице ASCII используется операция сложения с символом #raw(lang: "asm", "'0'"). Например, если у вас есть число в регистре, вы можете добавить к нему значение ASCII символа #raw(lang: "asm", "'0'") (которое равно 48 в десятичной системе). Это преобразует число от 0 до 9 в соответствующий ASCII-код:

```asm
add ax, '0' ; Преобразование числа в ASCII
```

Ну а если нам нужно получить именно цифру как символ, то используем команду ADD арифметического сложения цифры, содержащейся в регистре BX, с числом 30h – шестнадцатеричным кодом 0:

```asm
add ax, '30h' ; Преобразование цифры в её символьное представление
```

== Объясните назначение процедуры. Как определяются начало и конец процедуры?
Назначение процедуры заключается в том, чтобы выполнять определённые действия или задачи, которые могут быть повторно использованы в программе. Процедуры помогают структурировать код, делают его более читаемым и облегчают отладку.

Начало процедуры определяется ключевым словом proc, за которым следует имя процедуры. Конец процедуры обозначается ключевым словом endp. Например:

```asm
myProcedure proc
    ; тело процедуры
myProcedure endp
```

== Ваша программа состоит из главной процедуры и процедур-подпрограмм. Каким может быть взаимное расположение главной процедуры и подпрограмм?
Язык программирования ассемблера поддерживает применение процедур двух типов -- ближнего (near) и дальнего (far).

Процедуры ближнего типа должны находиться в том же сегменте, что и вызывающая программа. Дальний тип процедуры означает, что к ней можно обращаться из любого другого кодового сегмента.

Принято размещать подпрограммы либо в конце сегмента кода, после команд завершения программы, либо в самом начале сегмента кода, перед точкой входа в программу (т.к. процедура не должна выполняться без её вызова). В больших программах подпрограммы часто размещают в отдельном кодовом сегменте.

Кратко: процедуры могут быть:
- в начале кода перед входом в программу;
- в сегменте кода внутри программы;
- в конце кода после завершения программы.

Глобально, главная процедура может располагаться как перед подпрограммами, так и после них. Это зависит от предпочтений программиста и структуры программы. Важно лишь правильно организовать вызовы процедур, чтобы компилятор мог их найти.

== Как процессор использует стек при работе с любой процедурой?
При вызове процедуры информация о точке возврата помещается в стек. Это позволяет процессору вернуться к правильному месту после завершения выполнения процедуры. Стек работает по принципу "последний пришёл — первый вышел" (LIFO). Когда процедура завершается, адрес возврата извлекается из стека, и управление передаётся обратно в программу.

Важно понимать, что при вызове ближней процедуры в стек записывается слово, содержащее смещение точки возврата относительно текущего кодового сегмента, а при вызове дальней -- слово, содержащее адрес сегмента, в котором расположена точка возврата, и слово, содержащее смещение точки возврата в этом сегменте.

== С помощью какой команды вызывается процедура? Как меняется значение регистра SP после вызова процедуры? Приведите пример из вашей таблицы трассировки.
Процедура вызывается с помощью команды call. При выполнении этой команды значение регистра SP (Stack Pointer) уменьшается на размер адреса возврата (обычно на 2 байта для 16-битных адресов). Например:

```asm
call myProcedure ; SP уменьшается на 2
```

Если перед вызовом SP равен 0x1000, то после вызова он станет 0x0FFE.

== После какой команды процедуры из стека извлекается адрес возврата?
Адрес возврата извлекается из стека после выполнения команды ret. Эта команда не только возвращает управление обратно по адресу, который был сохранён в стеке, но также увеличивает указатель стека SP на размер адреса возврата:

```asm
ret ; Извлечение адреса возврата из стека
```